From c745517f8b30e6b745109fcf35a4e70d91ea30d7 Mon Sep 17 00:00:00 2001
From: Reuben Kuhnert <reuben.kuhnert@cloudera.com>
Date: Tue, 1 Dec 2015 13:35:07 -0600
Subject: [PATCH 326/327] CLOUDERA-BUILD: CDH-35089: Pre-commit / Post-commit
 scripts missing from 5.5.1 branch.

These scripts are needed to allow gerrit/jenkins to run pre/post commit jobs on the 5.5.1_dev branch.

Change-Id: I7efd8a427d9f9f6fcde000611b80ee9057bc589e
---
 cloudera/gerrit_add_remote.sh    |   34 ++++++
 cloudera/gerrit_submit_review.sh |   30 ++++++
 cloudera/post_commit_hook.sh     |   63 +++++++++++
 cloudera/pre_commit_hook.sh      |   81 ++++++++++++++
 cloudera/qtest-driver-info.py    |  217 ++++++++++++++++++++++++++++++++++++++
 5 files changed, 425 insertions(+)
 create mode 100755 cloudera/gerrit_add_remote.sh
 create mode 100755 cloudera/gerrit_submit_review.sh
 create mode 100755 cloudera/post_commit_hook.sh
 create mode 100755 cloudera/pre_commit_hook.sh
 create mode 100644 cloudera/qtest-driver-info.py

diff --git a/cloudera/gerrit_add_remote.sh b/cloudera/gerrit_add_remote.sh
new file mode 100755
index 0000000..f9cb5089
--- /dev/null
+++ b/cloudera/gerrit_add_remote.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+#
+# This script 'gerrit_add_remote.sh' helps Hive developers to add
+# the Cloudera gerrit remote repository to their local repository.
+#
+
+ set -e
+
+# Change directory to hive root directory
+cd `dirname $0`/..
+
+USER_NAME="$1"
+
+SCRIPT_NAME=`basename $0`
+function show_help() {
+  echo "Usage: $SCRIPT_NAME <ldap-username>"
+  echo "i.e. $SCRIPT_NAME ldap-user"
+  echo
+}
+
+if [ -z "$USER_NAME" ]; then
+  show_help && exit 1
+fi
+
+#
+# Prepare local github repository
+#
+
+echo "Preparing local github repository with Cloudera gerrit information ..."
+git remote add gerrit ssh://$USER_NAME@gerrit.sjc.cloudera.com:29418/hive
+git fetch gerrit
+scp -p -P 29418 $USER_NAME@gerrit.sjc.cloudera.com:hooks/commit-msg .git/hooks/
+chmod 755 .git/hooks/commit-msg
+echo "Done"
diff --git a/cloudera/gerrit_submit_review.sh b/cloudera/gerrit_submit_review.sh
new file mode 100755
index 0000000..e4322c7
--- /dev/null
+++ b/cloudera/gerrit_submit_review.sh
@@ -0,0 +1,30 @@
+#!/bin/bash
+#
+# This script 'gerrit_submit_review.sh' helps Hive developers to submit
+# their current commits to the Gerrit review board.
+#
+
+ set -e
+
+# Change directory to hive root directory
+cd `dirname $0`/..
+
+BRANCH="$1"
+REVIEWERS="$2"
+
+SCRIPT_NAME=`basename $0`
+function show_help() {
+  echo "Usage: $SCRIPT_NAME <branch> [r=<reviewer>[,r=<reviewer>[,...]]]"
+  echo "i.e. $SCRIPT_NAME cdh5-1.1.0_dev"
+  echo
+}
+
+if [ -z "$BRANCH" ]; then
+  show_help && exit 1
+fi
+
+if [ -n "$REVIEWERS" ]; then
+  git push gerrit HEAD:refs/for/$BRANCH%$REVIEWERS
+else
+  git push gerrit HEAD:refs/for/$BRANCH
+fi
diff --git a/cloudera/post_commit_hook.sh b/cloudera/post_commit_hook.sh
new file mode 100755
index 0000000..812ad6b
--- /dev/null
+++ b/cloudera/post_commit_hook.sh
@@ -0,0 +1,63 @@
+#!/bin/bash
+#
+# This script (post_commit_hook.sh) is executed by CDH*-Hive-Post-Commit jenkins job
+# located at http://unittest.jenkins.cloudera.com/view/gerrit
+#
+# CDH*-Hive-Post-Commit refers to a specific CDH release version, such as:
+# CDH5-Hive-Post-Commit, CDH5.5.x-Hive-Post-Commit, etc.
+#
+# This script is called from inside the Hive source code directory, and it
+# should be used to build and test the current Hive code.
+#
+# hive-gerrit has its own username and home directory in the Jenkins machine
+
+# -e will make the script exit if an error happens on any command executed
+set -ex
+
+# Script created by Cloudcat with useful environment information
+[ -f /opt/toolchain/toolchain.sh ] && . /opt/toolchain/toolchain.sh
+
+# Use JAVA7_HOME if exists
+export JAVA_HOME=${JAVA7_HOME:-$JAVA_HOME}
+
+# If JDK_VERSION exists, then try to get the value from JAVAX_HOME
+if [ -n "$JDK_VERSION" ]; then
+  # Get JAVAX_HOME value, where X is the JDK version
+  java_home=`eval echo \\$JAVA${JDK_VERSION}_HOME`
+  if [ -n "$java_home" ]; then
+    export JAVA_HOME="$java_home"
+  else
+    echo "ERROR: USE_JDK_VERSION=$JDK_VERSION, but JAVA${JDK_VERSION}_HOME is not found."
+    exit 1
+  fi
+fi
+
+export PATH=${JAVA_HOME}/bin:${PATH}
+
+# WORKSPACE is an environment variable created by Jenkins, and it is the directory where the build is executed.
+# If not set, then default to $HOME
+MVN_REPO_LOCAL=${WORKSPACE:-$HOME}/.m2/repository
+
+# Add any test to be excluded in alphabetical order to keep readability, starting with files, and
+# then directories.
+declare -a EXCLUDE_TESTS=(
+  ".*org/apache/hadoop/hive/ql/exec/.*"
+  ".*org/apache/hadoop/hive/ql/parse/.*"
+  ".*org/apache/hive/hcatalog/mapreduce/.*"
+  ".*org/apache/hive/hcatalog/pig/.*"
+)
+
+function get_excluded_tests() {
+  local IFS="|"
+  echo -n "${EXCLUDE_TESTS[*]}"
+}
+
+function get_regex_excluded_tests() {
+  echo -n "%regex[`get_excluded_tests`]"
+}
+
+regex_tests=`get_regex_excluded_tests`
+mvn clean install -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -Dtest.excludes.additional="$regex_tests"
+cd itests/
+rm -f thirdparty/spark-latest.tar.gz
+mvn clean install -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -DskipTests
diff --git a/cloudera/pre_commit_hook.sh b/cloudera/pre_commit_hook.sh
new file mode 100755
index 0000000..274635d
--- /dev/null
+++ b/cloudera/pre_commit_hook.sh
@@ -0,0 +1,81 @@
+#!/bin/bash
+#
+# This script (pre_commit_hook.sh) is executed by hive-gerrit jenkins job
+# located at http://unittest.jenkins.cloudera.com/view/gerrit
+#
+# This script is called from inside the Hive source code directory, and it
+# should be used to build and test the current Hive patched code.
+#
+# hive-gerrit has its own username and home directory in the Jenkins machine
+
+# -e will make the script exit if an error happens on any command executed
+set -ex
+
+# Script created by Cloudcat with useful environment information
+[ -f /opt/toolchain/toolchain.sh ] && . /opt/toolchain/toolchain.sh
+
+# Use JAVA7_HOME if exists
+export JAVA_HOME=${JAVA7_HOME:-$JAVA_HOME}
+
+# If JDK_VERSION exists, then try to get the value from JAVAX_HOME
+if [ -n "$JDK_VERSION" ]; then
+  # Get JAVAX_HOME value, where X is the JDK version
+  java_home=`eval echo \\$JAVA${JDK_VERSION}_HOME`
+  if [ -n "$java_home" ]; then
+    export JAVA_HOME="$java_home"
+  else
+    echo "ERROR: USE_JDK_VERSION=$JDK_VERSION, but JAVA${JDK_VERSION}_HOME is not found."
+    exit 1
+  fi
+fi
+
+export PATH=${JAVA_HOME}/bin:${PATH}
+
+# WORKSPACE is an environment variable created by Jenkins, and it is the directory where the build is executed.
+# If not set, then default to $HOME
+MVN_REPO_LOCAL=${WORKSPACE:-$HOME}/.m2/repository
+
+# Add any test to be excluded in alphabetical order to keep readability, starting with files, and
+# then directories.
+declare -a EXCLUDE_TESTS=(
+  ".*org/apache/hadoop/hive/metastore/.*"
+  ".*org/apache/hadoop/hive/ql/Test.*"
+  ".*org/apache/hadoop/hive/ql/exec/.*"
+  ".*org/apache/hadoop/hive/ql/io/orc/.*"
+  ".*org/apache/hadoop/hive/ql/parse/TestParseNegative"
+  ".*org/apache/hadoop/hive/ql/security/.*"
+  ".*org/apache/hive/hcatalog/mapreduce/.*"
+  ".*org/apache/hive/hcatalog/pig/.*"
+  ".*org/apache/hive/jdbc/.*"
+)
+
+function get_excluded_tests() {
+  local IFS="|"
+  echo -n "${EXCLUDE_TESTS[*]}"
+}
+
+function get_regex_excluded_tests() {
+  echo -n "%regex[`get_excluded_tests`]"
+}
+
+# For pre-commit, we just look for qtests edited in the last commit
+function get_qtests_to_execute() {
+  git diff --name-only HEAD~1 | grep ".q$\|.q.out$" | paste -s -d"," -
+}
+
+regex_tests=`get_regex_excluded_tests`
+mvn clean install -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -Dtest.excludes.additional="$regex_tests"
+cd itests/
+rm -f thirdparty/spark-latest.tar.gz
+mvn clean install -Phadoop-2 -Dmaven.repo.local="$MVN_REPO_LOCAL" -DskipTests
+
+# Execute .q tests that were modified in the patch
+tests_modified=`get_qtests_to_execute`
+if [ -n "$tests_modified" ]; then
+  for t in `python ../cloudera/qtest-driver-info.py --pom ../itests/qtest/pom.xml --properties ../itests/src/test/resources/testconfiguration.properties --paths $tests_modified`; do
+    driver=`echo $t | cut -d: -f1`
+    files=`echo $t | cut -d: -f2`
+
+    mvn test -Phadoop-2 -Dtest=$driver -Dqfile=$files
+  done
+fi
diff --git a/cloudera/qtest-driver-info.py b/cloudera/qtest-driver-info.py
new file mode 100644
index 0000000..67a2c97
--- /dev/null
+++ b/cloudera/qtest-driver-info.py
@@ -0,0 +1,217 @@
+#!/usr/bin/python
+
+#
+# This script will search the required Test drivers into the '--pom' parameter file
+# that need to be used to run the tests for the specified q-tests passed on '--paths'.
+#
+
+import argparse
+import os
+import re
+import sys
+import xml.etree.ElementTree as ET
+
+
+def load_properties(filepath, sep='=', comment_char='#'):
+    """
+    Read the file passed as parameter as a properties file.
+    """
+    props = {}
+    with open(filepath, "rt") as f:
+        for line in f:
+            l = line.strip()
+            if l and not l.startswith(comment_char):
+                if l.endswith("\\"):
+                    l = l.strip("\\")
+
+                key_value = l.split(sep)
+
+                if len(key_value) == 1:
+                    props_val = props_val + key_value[0].strip()
+                else:
+                    props_key = key_value[0].strip()
+                    props_val = key_value[1].strip('" \t"')
+
+                props[props_key] = props_val
+
+    return props
+
+def replace_vars(line, propsVars):
+    for var in propsVars:
+        line = line.replace("${" + var + "}", propsVars[var])
+    return line
+
+#
+# Find all <qtestgen ... /> sections from the pom.xml file.
+#
+def find_qtestgen(pomtree):
+    PREFIX_XMLNS = "{http://maven.apache.org/POM/4.0.0}"
+
+    '''
+    Example of a XML structure to find:
+
+    <build>
+     <plugins>
+       <plugin>
+         <groupId>org.apache.maven.plugins</groupId>
+         ...
+         <executions>
+           <execution>
+             <id>generate-tests-sources</id>
+             ...
+             <configuration>
+               <target>
+                 <qtestgen ... />
+                 <qtestgen ... />
+               </target>
+             </configuration>
+           </execution>
+         </executions>
+       </plugin>
+     </plugins>
+    </build>
+    '''
+
+    plugins = pomtree.getroot() \
+        .find("%sbuild" % PREFIX_XMLNS) \
+        .find("%splugins" % PREFIX_XMLNS)
+
+    for plugin in plugins.findall("%splugin" % PREFIX_XMLNS):
+        if plugin.find("%sgroupId" % PREFIX_XMLNS).text == "org.apache.maven.plugins":
+            executions = plugin.find("%sexecutions" % PREFIX_XMLNS)
+            for execution in executions.findall("%sexecution" % PREFIX_XMLNS):
+                if execution.find("%sid" % PREFIX_XMLNS).text == "generate-tests-sources":
+                    target = execution.find("%sconfiguration" % PREFIX_XMLNS) \
+                        .find("%starget" % PREFIX_XMLNS)
+
+                    return target.findall("%sqtestgen" % PREFIX_XMLNS)
+
+    return None
+
+# Check if a qfile is included in the <qtestgen> tag by looking into the following
+# attributes:
+#   includeQueryFile=    List of .q files that are run if the driver is executed without using -Dqfile=
+#   excludeQueryFile=    List of .q files that should be excluded from the driver
+#   queryFile=           List of .q files that are executed by the driver
+def is_qfile_include(qtestgen, qfile, testproperties):
+
+    '''
+    Example of a <qtestgen ... /> XML tag
+
+    <qtestgen  ...
+               queryDirectory="${basedir}/${hive.path.to.root}/ql/src/test/queries/clientpositive/"
+               queryFile="${qfile}"
+               excludeQueryFile="${minimr.query.files},${minitez.query.files},${encrypted.query.files}"
+               includeQueryFile=""
+               ...
+               resultsDirectory="${basedir}/${hive.path.to.root}/ql/src/test/results/clientpositive/" className="TestCliDriver"
+    ... />
+    '''
+
+    testproperties["qfile"] = qfile
+
+    # Checks if the qfile is not excluded from qtestgen
+    if qtestgen.get("excludeQueryFile") is not None:
+        excludedFiles = replace_vars(qtestgen.get("excludeQueryFile"), testproperties)
+        if re.compile(qfile).search(excludedFiles) is not None:
+            return False
+
+    # If includeQueryFile exists, then check if the qfile is included, otherwise return False
+    if qtestgen.get("includeQueryFile") is not None:
+        includedFiles = replace_vars(qtestgen.get("includeQueryFile"), testproperties)
+        return re.compile(qfile).search(includedFiles) is not None
+
+    # There are some drivers that has queryFile set to a file.
+    # i.e. queryFile="hbase_bulk.m"
+    # If it is set like the above line, then we should not use such driver if qfile is different
+    if qtestgen.get("queryFile") is not None:
+        queryFile = replace_vars(qtestgen.get("queryFile"), testproperties)
+        return re.compile(qfile).search(queryFile) is not None
+
+    return True
+
+# Search for drivers that can run the specified qfile (.q) by looking into the 'queryDirectory' attribute
+def get_drivers_for_qfile(pomtree, testproperties, qdir, qfile):
+    drivers = []
+
+    for qtestgen in find_qtestgen(pomtree):
+        # Search for the <qtestgen> that matches the desired 'queryDirectory'
+        if re.compile(qdir).search(qtestgen.get("queryDirectory")) is not None:
+            if is_qfile_include(qtestgen, qfile, testproperties):
+                drivers.append(qtestgen.get("className"))
+
+    return drivers
+
+# Search for drivers that can run the specified qfile result (.q.out) by looking into the 'resultsDirectory' attribute
+def get_drivers_for_qresults(pomtree, testproperties, qresults, qfile):
+    drivers = []
+
+    for qtestgen in find_qtestgen(pomtree):
+        if qtestgen.get("resultsDirectory"):
+            # Search for the <qtestgen> that matches the desired 'resultsDirectory'
+            if re.compile(qresults).search(qtestgen.get("resultsDirectory")) is not None:
+                if is_qfile_include(qtestgen, qfile, testproperties):
+                    drivers.append(qtestgen.get("className"))
+
+    return drivers
+
+#
+# This command accepts a list of paths (.q or .q.out paths), and displays the
+# Test drivers that should be used for testing such q-test files.
+#
+# The command needs the path to itests/qtest/pom.xml to look for the drivers.
+#
+if __name__ == "__main__":
+    # Parse command line arguments
+    parser = argparse.ArgumentParser()
+    parser.add_argument("--paths")
+    parser.add_argument("--pom")
+    parser.add_argument("--properties")
+    args = parser.parse_args()
+
+    if args.pom is None:
+        print "The parameter '--pom' was not found."
+        print "Please specify the pom.xml path by using '--pom <pom-file>'"
+        sys.exit(1)
+
+    if args.properties is None:
+        print "The parameter '--properties' was not found."
+        print "Please specify the testconfiguration.properties by using '--propeties <file>"
+        sys.exit(1)
+
+    if args.paths is None:
+        print "The parameter '--paths' was not found"
+        print "Please specify a list of comma separated .q paths (or .q.out paths)"
+        sys.exit(1)
+
+    pomtree = ET.parse(args.pom)
+    testproperties = load_properties(args.properties)
+
+    # Get all paths information, and get the correct Test driver
+    if args.paths:
+        tests = {}
+
+        # --paths has a list of paths comma separated
+        for p in args.paths.split(","):
+            dirname = os.path.dirname(p)
+            basename = os.path.basename(p)
+
+            # Use a different method to look for .q.out files
+            if re.compile("results").search(dirname):
+                qfile = basename[0:basename.index(".out")]
+                drivers = get_drivers_for_qresults(pomtree, testproperties, dirname, qfile)
+            else:
+                qfile = basename
+                drivers = get_drivers_for_qfile(pomtree, testproperties, dirname, qfile)
+
+            # We make sure to not repeat tests if for some reason we passed something
+            # like a.q and a.q.out
+            for d in drivers:
+                if d in tests:
+                    if not qfile in tests[d]:
+                        tests[d].append(qfile)
+                else:
+                    tests[d] = [qfile]
+
+        for t in tests:
+            print "%s:%s" % (t, ",".join(tests[t]))
\ No newline at end of file
-- 
1.7.9.5

